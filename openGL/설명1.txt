<정점단위 계산법>
-> 각이졌음 / 우리가 배운 삼각형별로 가운데를 채움 -> 각 삼각형마다 차이가 나니까 각져보임
ex)flat셰이딩
->색상 결정이 필요함
표면의 수직과 - 빛이 비추는 방향의 역벡터

이 사이의 각도가 각 색깔에 곱해지는 x의 값이 된다 -> 수직이 되는 그 부분의 픽셀의 색깔 결정

표면의 법선과 빛의 역벡터 -> 한마디로 내적 구하기
===================================
<픽셀단위 계산법>
퀄리티가 다름 -> 모든 픽셀을 계산함
우리가 하는 코드는 픽셀단위 계산법
ex) 고라우드, 퐁 셰이딩

MaterialDiffuserColor -> 텍스쳐가 입혀진 그 표면의 색상을 말함
distance -> 거리 / 벡터계산시 사용
cosTheta -> 
dot(n1,) : 내적 / n은 표면의 법선 - l은 빛의 역벡터 -> 내적한 계산
내적한 값을 0과 1 사이의 값으로 만들어주는 게 clamp()의 역할(최소, 최대값을 결정함)
ex)마이너스라면 0, 1이 넘어가면 1로 맞춰주는 역할이 clamp()

E, R 신경쓰지말기

color가 아웃풋 -> 이게 하나의 픽셀 색상을 결정 -> 모든 픽셀을 계산하면 물체의 색상 계산
(표면색 * 빛의 색깔 * 빛의 강도 * 각도) / 거리의 제곱
빨간색 * 흰색 * 적당함 * 0.1쯤 / 100쯤?

https://heinleinsgame.tistory.com/15
https://learnopengl.com/code_viewer.php?code=lighting/basic_lighting-exercise1
